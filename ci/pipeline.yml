---
#
# ci/pipeline.yml
#
# Pipeline structure file for a BOSH Release pipeline
#
# DO NOT MAKE CHANGES TO THIS FILE.  Instead, modify
# ci/settings.yml and override what needs overridden.
# This uses spruce, so you have some options there.
#
# author:  James Hunt <james@niftylogic.com>
# created: 2016-03-30

meta:
  name:     (( param "Please name your pipeline" ))
  target:   (( param "Please identify the name of the target Concourse CI" ))
  url:      (( param "Please specify the full url of the target Concourse CI" ))
  pipeline: (( concat meta.name "-boshrelease" ))

  aws:
    bucket:     (( concat meta.pipeline "-pipeline" ))
    access_key: (( param "Please set your AWS Access Key ID for your pipeline S3 Bucket" ))
    secret_key: (( param "Please set your AWS Secret Key ID for your pipeline S3 Bucket" ))

  github:
    uri:          (( concat "git@github.com:" meta.github.owner "/" meta.github.repo ))
    owner:        (( param "Please specify the name of the user / organization that owns the Github repository" ))
    repo:         (( param "Please specify the name of the Github repository" ))
    branch:       master
    private_key:  (( param "Please generate an SSH Deployment Key for this repo and specify it here" ))
    access_token: (( param "Please generate a Personal Access Token to be used for creating github releases (do you have a ci-bot?)" ))

  bosh-lite:
    target:   (( param "Please specify the BOSH target URI for the bosh-lite to run test deployments against" ))
    username: admin
    password: admin

  slack:
    webhook:       (( param "Please specify your Slack Incoming Webhook Integration URL" ))
    blob_failure:  '(( concat ":concourse-fail: <" meta.url "/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME| Failed to update the blob for $BUILD_JOB_NAME>" ))'
    build_failure: '(( concat ":concourse-fail: <" meta.url "/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME| Failed to ship a new bosh release. :sad-panda:>" ))'
    blob_success:  '(( concat "New version of $BUILD_JOB_NAME was detected, and updated in master. <" meta.url "/pipelines/$BUILD_PIPELINE_NAME| Cut a new release?>" ))'
    test_failure:  '(( concat ":concourse-fail: <" meta.url "/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME| Tests failed!>" ))'
    channel:       (( param "Please specify the channel (#name) or user (@user) to send messages to" ))
    username:      concourse
    icon:          http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png

groups:
  - name: (( grab meta.pipeline ))
    jobs:
      - testflight
      - rc
      - shipit
      - major
      - minor
  - name: blobs
    jobs:
    - spruce
    - genesis
    - safe

jobs:
  - name: testflight
    public: true
    serial: true
    plan:
      - aggregate:
          - { get: git }
          - { get: changes, trigger: true }
      - task: testflight
        config:
          platform: linux
          image: docker:///starkandwayne/concourse
          inputs:
            - { name: git }
          run:
            path: ./git/ci/scripts/testflight
            args: []
          params:
            REPO_ROOT:            git
            BOSH_LITE_TARGET:     (( grab meta.bosh-lite.target ))
            BOSH_LITE_USERNAME:   (( grab meta.bosh-lite.username ))
            BOSH_LITE_PASSWORD:   (( grab meta.bosh-lite.password ))
            BOSH_LITE_DEPLOYMENT: (( concat "ci-" meta.pipeline ))
        on_failure:
          put: notify
          params:
            channel:  (( grab meta.slack.channel ))
            username: (( grab meta.slack.username ))
            icon_url: (( grab meta.slack.icon ))
            text:     (( grab meta.slack.test_failure ))

  - name: rc
    public: true
    plan:
      - aggregate:
          - { get: git,     trigger: true,  passed: [testflight] }
          - { get: version, trigger: false, params: {pre: rc} }
      - put: version
        params: {file: version/number}

  - name: minor
    public: true
    plan:
      - { get: version, trigger: false, params: {bump: minor} }
      - { put: version,                 params: {file: version/number} }

  - name: major
    public: true
    plan:
      - { get: version, trigger: false, params: {bump: major} }
      - { put: version,                 params: {file: version/number} }

  - name: shipit
    public: true
    serial: true
    plan:
      - aggregate:
          - { get: version, passed: [rc], params: {bump: final} }
          - { get: git,     passed: [rc] }
      - task: release
        config:
          image: docker:///starkandwayne/concourse
          platform: linux
          inputs:
            - name: version
            - name: git
          outputs:
            - name: gh
            - name: pushme
          run:
            path: ./git/ci/scripts/shipit
            args: []
          params:
            REPO_ROOT:    git
            VERSION_FROM: version/number
            RELEASE_NAME: (( concat meta.name " BOSH Release" ))
            RELEASE_ROOT: gh
            REPO_OUT:     pushme
            BRANCH:       (( grab meta.github.branch ))

            BOSH_LITE_TARGET:     (( grab meta.bosh-lite.target ))
            BOSH_LITE_USERNAME:   (( grab meta.bosh-lite.username ))
            BOSH_LITE_PASSWORD:   (( grab meta.bosh-lite.password ))
            BOSH_LITE_DEPLOYMENT: (( concat "ci-" meta.pipeline ))

            AWS_ACCESS_KEY:       (( grab meta.aws.access_key ))
            AWS_SECRET_KEY:       (( grab meta.aws.secret_key ))
        on_failure:
          put: notify
          params:
            channel:  (( grab meta.slack.channel ))
            username: (( grab meta.slack.username ))
            icon_url: (( grab meta.slack.icon ))
            text:     (( grab meta.slack.test_failure ))

      - aggregate:
        - put: version
          params:
            bump: patch
        - put: git
          params:
            rebase: true
            repository: pushme/git
          on_failure:
            put: notify
            params:
              channel:  (( grab meta.slack.channel ))
              username: (( grab meta.slack.username ))
              icon_url: (( grab meta.slack.icon ))
              text:     (( grab meta.slack.test_failure ))
        - put: github
          params:
            name:   gh/name
            tag:    gh/tag
            body:   gh/notes.md
            globs: [gh/artifacts/*]
          on_failure:
            put: notify
            params:
              channel:  (( grab meta.slack.channel ))
              username: (( grab meta.slack.username ))
              icon_url: (( grab meta.slack.icon ))
              text:     (( grab meta.slack.test_failure ))
        - put: s3
          params:
            file:  (( concat "gh/artifacts/" meta.name "-*.tgz" ))

  - name: spruce
    public: true
    plan:
    - aggregate:
      - { get: git }
      - { get: spruce, trigger: true }
    - task: update-spruce
      config:
        image: docker:///starkandwayne/concourse
        platform: linux
        inputs:
        - name: git
        - name: spruce
        outputs:
        - name: pushme
        run:
          path: ./git/ci/scripts/update-blob
        params:
          REPO_ROOT:        git
          REPO_OUT:         pushme
          RELEASE_DIR:      spruce
          BLOB:             spruce
          BLOB_BINARY:      spruce-linux-amd64
          BLOB_DESTINATION: spruce/spruce
          AWS_ACCESS_KEY:   (( grab meta.aws.access_key ))
          AWS_SECRET_KEY:   (( grab meta.aws.secret_key ))
          BRANCH:       (( grab meta.github.branch ))
      on_failure:
        put: notify
        params:
          channel:  (( grab meta.slack.channel ))
          username: (( grab meta.slack.username ))
          icon_url: (( grab meta.slack.icon ))
          text:     (( grab meta.slack.blob_failure ))
    - put: git
      params:
        rebase: true
        repository: pushme/git
      on_success:
        put: notify
        params:
          channel:  (( grab meta.slack.channel ))
          username: (( grab meta.slack.username ))
          icon_url: (( grab meta.slack.icon ))
          text:     (( grab meta.slack.blob_success ))
      on_failure:
        put: notify
        params:
          channel:  (( grab meta.slack.channel ))
          username: (( grab meta.slack.username ))
          icon_url: (( grab meta.slack.icon ))
          text:     (( grab meta.slack.blob_failure ))
  - name: genesis
    public: true
    plan:
    - aggregate:
      - { get: git }
      - { get: genesis, trigger: true }
    - task: update-genesis
      config:
        image: docker:///starkandwayne/concourse
        platform: linux
        inputs:
        - name: git
        - name: genesis
        outputs:
        - name: pushme
        run:
          path: ./git/ci/scripts/update-blob
        params:
          REPO_ROOT:        git
          REPO_OUT:         pushme
          RELEASE_DIR:      genesis
          BLOB:             genesis
          BLOB_BINARY:      genesis
          BLOB_DESTINATION: genesis/genesis
          AWS_ACCESS_KEY:   (( grab meta.aws.access_key ))
          AWS_SECRET_KEY:   (( grab meta.aws.secret_key ))
          BRANCH:       (( grab meta.github.branch ))
      on_failure:
        put: notify
        params:
          channel:  (( grab meta.slack.channel ))
          username: (( grab meta.slack.username ))
          icon_url: (( grab meta.slack.icon ))
          text:     (( grab meta.slack.blob_failure ))
    - put: git
      params:
        rebase: true
        repository: pushme/git
      on_failure:
        put: notify
        params:
          channel:  (( grab meta.slack.channel ))
          username: (( grab meta.slack.username ))
          icon_url: (( grab meta.slack.icon ))
          text:     (( grab meta.slack.blob_failure ))
  - name: safe
    public: true
    plan:
    - aggregate:
      - { get: git }
      - { get: safe, trigger: true }
    - task: update-safe
      config:
        image: docker:///starkandwayne/concourse
        platform: linux
        inputs:
        - name: git
        - name: safe
        outputs:
        - name: pushme
        run:
          path: ./git/ci/scripts/update-blob
        params:
          REPO_ROOT:        git
          REPO_OUT:         pushme
          RELEASE_DIR:      safe
          BLOB:             safe
          BLOB_BINARY:      safe-linux-amd64
          BLOB_DESTINATION: safe/safe
          AWS_ACCESS_KEY:   (( grab meta.aws.access_key ))
          AWS_SECRET_KEY:   (( grab meta.aws.secret_key ))
          BRANCH:       (( grab meta.github.branch ))
      on_failure:
        put: notify
        params:
          channel:  (( grab meta.slack.channel ))
          username: (( grab meta.slack.username ))
          icon_url: (( grab meta.slack.icon ))
          text:     (( grab meta.slack.blob_failure ))
    - put: git
      params:
        rebase: true
        repository: pushme/git
      on_success:
        put: notify
        params:
          channel:  (( grab meta.slack.channel ))
          username: (( grab meta.slack.username ))
          icon_url: (( grab meta.slack.icon ))
          text:     (( grab meta.slack.blob_success ))
      on_failure:
        put: notify
        params:
          channel:  (( grab meta.slack.channel ))
          username: (( grab meta.slack.username ))
          icon_url: (( grab meta.slack.icon ))
          text:     (( grab meta.slack.blob_failure ))

resource_types:
  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource

resources:
  - name: git
    type: git
    source:
      uri:         (( grab meta.github.uri ))
      branch:      (( grab meta.github.branch ))
      private_key: (( grab meta.github.private_key ))
  - name: changes
    type: git
    source:
      uri:         (( grab meta.github.uri ))
      branch:      (( grab meta.github.branch ))
      private_key: (( grab meta.github.private_key ))
    paths:
      - src/**/*
      - jobs/**/*
      - packages/**/*
      - config/blobs.yml
      - templates/**/*

  - name: version
    type: semver
    source :
      driver:            s3
      bucket:            (( grab meta.aws.bucket ))
      key:               version
      access_key_id:     (( grab meta.aws.access_key ))
      secret_access_key: (( grab meta.aws.secret_key ))
      initial_version:   (( grab meta.initial_version || "3.0.0" ))

  - name: notify
    type: slack-notification
    source:
      url: (( grab meta.slack.webhook ))

  - name: github
    type: github-release
    source:
      user:         (( grab meta.github.owner ))
      repository:   (( grab meta.github.repo ))
      access_token: (( grab meta.github.access_token ))

  - name: s3
    type: s3
    source:
      bucket:            (( grab meta.aws.bucket ))
      regexp:            (( concat meta.name "-(.*).tgz" ))
      access_key_id:     (( grab meta.aws.access_key ))
      secret_access_key: (( grab meta.aws.secret_key ))

  - name: spruce
    type: github-release
    source:
      user: geofffranks
      repository: spruce
      access_token: (( grab meta.github.access_token ))

  - name: genesis
    type: github-release
    source:
      user: starkandwayne
      repository: genesis
      access_token: (( grab meta.github.access_token ))

  - name: safe
    type: github-release
    source:
      user: jhunt
      repository: safe
      access_token: (( grab meta.github.access_token ))
